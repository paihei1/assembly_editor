# THESE ARE ASSUMED BY THE PROGRAM, CHANGING THEM WILL BREAK THINGS
# KEEP THEM IN THIS ORDER ASWELL (adding some at the end should be fine)

# (0,0)
MOV64  0000000000000000 0000000 0 0 0000000000000000 0000000 0 0 in  ri4m8 out  r
# (0,1)
MOV64  0000000000000000 0000000 0 0 0000000000000000 0000000 0 0 in  ri4 out  m8
# (0,2)
XCHG64 0000000000000000 0000000 0 0 0000000000000000 0000000 0 0 io  r io  rm8

# these are the 'move the entire register' instructions (unaligned),
# swap in the 128/512 versions according to capabilities
# (0,3)
MOV256 0000000000000000 0000000 0 0 0000000000000000 0000000 0 0 in xym32 out xy
# (0,4)
MOV256 0000000000000000 0000000 0 0 0000000000000000 0000000 0 0 in xy out m32

# the stack operations
# (0,5)
ADD64 0000000000000000 0000000 0 0 0000000000000000 1111101 0 0 in m8    io r
# (0,6)
ADD64 0000000000000000 0000000 0 0 0000000000000000 1111101 0 0 in r i4  io rm8
# (0,7)
SUB64 0000000000000000 0000000 0 0 0000000000000000 1111101 0 0 in m8    io r
# (0,8)
SUB64 0000000000000000 0000000 0 0 0000000000000000 1111101 0 0 in r i4  io rm8
# (0,9)
INC64 0000000000000000 0000000 0 0 0000000000000000 1111101 0 0 io rm8
# (0,10)
DEC64 0000000000000000 0000000 0 0 0000000000000000 1111101 0 0 io rm8
# (0,11)
POP16   0000001000000000 0000000 0 0 0000001000000000 0000000 0 0 out rm2 in* RSP 2
# (0,12)
POP32   0000001000000000 0000000 0 0 0000001000000000 0000000 0 0 out rm4 in* RSP 4
# (0,13)
POP64   0000001000000000 0000000 0 0 0000001000000000 0000000 0 0 out rm8 in* RSP 8
# (0,14)
PUSH16  0000001000000000 0000000 0 0 0000001000000000 0000000 0 0 in  rm2i2 out* RSP 2
# (0,15)
PUSH32  0000001000000000 0000000 0 0 0000001000000000 0000000 0 0 in  rm4i4 out* RSP 4
# (0,16)
PUSH64  0000001000000000 0000000 0 0 0000001000000000 0000000 0 0 in  rm8i4 out* RSP 8


